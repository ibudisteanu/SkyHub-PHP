<?php

if ( ! defined('BASEPATH')) exit('No direct script access allowed');

require_once APPPATH.'core/models/MY_Hierarchy_model.php';
require_once APPPATH.'core/models/components/Component_Replies_container_model.php';
require_once APPPATH.'core/models/components/Component_Images_model.php';

require_once APPPATH.'modules/forums/widgets/widgets_graphical/voting_system/voting/models/Vote_model.php';
require_once APPPATH.'modules/widgets/widgets_db/visitors_statistics/models/Visitors_statistics_model.php';

class MY_Hierarchy_page_model extends MY_Hierarchy_model
{

    public $sURLName;
    public $sFullURLName;//Breadcrumb Name:    cool/my awesome forum/awesome/topic title
    protected $sInitialFullURLLink;//used for refreshing the cache
    public $sFullURLLink;//Breadcrumb URL Link: cat-cool/awesome-forum/category-awesome1/topic-tile/
    public $sFullURLDomains; //                 forum/forum_category/topic/

    public $sCountry;
    public $sCity;
    public $sLanguage;
    public $fImportance;

    public $arrInputKeywords = array();

    /*ADDITIONAL FEATURES */
    public $objVisitorsStatistics;
    public $bCreateVisitorsStatistics;

    public $objRepliesComponent;
    public $bEnableRepliesComponent;

    public $objImagesComponent;
    public $bEnableImagesComponent;

    public $objVote;
    public $bCreateVoting;
    public $FeaturesSubChildren;


    //EXAMPLE public $arrChildrenDefinition = array(array("Name"=>"Children","Class"=>"MY_Hierarchy_page_model","Array"=>"arrChildren","EnableChildren"=>true,"CreateVisitorsStatistics"=>false, "CreateVoting"=>true, "EnableMaterializedParents"=>true));
    public $arrChildrenDefinition = [];

    public function __construct($bEnableChildren=true, $hierarchyGrandParent = null, $hierarchyParent=null,
                                $bCreateVisitorsStatistics=false, $bCreateVoting=false, $bEnableMaterializedParents=false, $bEnableRepliesComponent=false, $bEnableImagesComponent=false)
    {
        parent::__construct($bEnableChildren, $hierarchyGrandParent, $hierarchyParent, $bEnableMaterializedParents);
        $this->bCreateVisitorsStatistics = $bCreateVisitorsStatistics;
        $this->bEnableRepliesComponent = $bEnableRepliesComponent;
        $this->bEnableImagesComponent = $bEnableImagesComponent;

        $this->bCreateVoting = $bCreateVoting;

        if (($this->bCreateVisitorsStatistics))
        {
            if ($this->objVisitorsStatistics == null)
            {
                //$this->load->model('visitors_statistics/Visitors_statistics_models','VisitorsStatisticsModels');
                //$this->objVisitorsStatistics = $this->VisitorsStatisticsModels->findVisitorsStatisticsByAttachedParentId($this->sID);
                $this->objVisitorsStatistics  = new Visitors_statistics_model($this->sID, array($this, "updateByQuery"), (isset($this->FeaturesSubChildren) ? $this->FeaturesSubChildren['Name'] : ''));
            } else
                $this->objVisitorsStatistics->__construct($this->sID, array($this, "updateByQuery"), (isset($this->FeaturesSubChildren) ? $this->FeaturesSubChildren['Name'] : ''));
        }

        if ($this->bCreateVoting)
        {
            if ($this->objVote == null)
                $this->objVote = new Vote_model(null,false,true,(isset($this->FeaturesSubChildren) ? $this->FeaturesSubChildren['Name'] : ''));
            else
                $this->objVote->__construct(null,false,true,(isset($this->FeaturesSubChildren) ? $this->FeaturesSubChildren['Name'] : ''));

        }

        if ($this->bEnableRepliesComponent)
        {
            if ($this->objRepliesComponent == null) $this->objRepliesComponent = new Replies_container_model($this);
            else $this->objRepliesComponent->__construct($this);
        }

        if ($this->bEnableImagesComponent)
        {
            if ($this->objImagesComponent == null) $this->objImagesComponent = new Component_Images_model($this);
            else $this->objImagesComponent->__construct($this);
        }

        $this->refreshSpecialParentHierarchy();
    }

    protected function refreshSpecialParentHierarchy()
    {
        if ($this->objVote != null) {
            $this->objVote->hierarchyParent = $this;
            $this->objVote->hierarchyGrandParent = $this->hierarchyGrandParent;;
            $this->objVote->sParentObjectId = $this->sID;
            $this->objVote->sGrandParentObjectId = $this->getAttachedGrandParentId();
        }

        if ($this->objVisitorsStatistics != null){
            $this->objVisitorsStatistics->sAttachedParentId = $this->sID;
        }
    }

    protected function readCursor($p, $bEnableChildren=null)
    {
        parent::readCursor($p,$bEnableChildren); // TODO: Change the autogenerated stub


        if (isset($p['URLName'])) $this->sURLName = $p['URLName'];
        if (isset($p['FullURLLink']))
        {
            $this->sFullURLLink = $p['FullURLLink'];
            $this->sInitialFullURLLink = $this->sFullURLLink;
        }
        if (Isset($p['FullURLDomains'])) $this->sFullURLDomains = $p['FullURLDomains'];
        if (isset($p['FullURLName'])) $this->sFullURLName = $p['FullURLName'];

        if (isset($p['Country'])) $this->sCountry = $p['Country'];
        if (isset($p['City'])) $this->sCity = $p['City'];
        if (isset($p['Language'])) $this->sLanguage = $p['Language'];

        if (isset($p['Importance'])) $this->fImportance = (float)$p['Importance'];
        else $this->fImportance = 0;

        if (isset($p['InputKeywords'])) $this->arrInputKeywords = $p['InputKeywords'];

        if (isset($p['Visitors']) && ($this->objVisitorsStatistics != null))
            $this->objVisitorsStatistics->readCursor($p['Visitors'],$bEnableChildren);

//        if (($this->objVisitorsStatistics != null)&&($this->objVisitorsStatistics->sAttachedParentId != $this->sID))
//            $this->objVisitorsStatistics = $this->VisitorsStatisticsModels->findVisitorsStatisticsByAttachedParentId($this->sID);

        if ($this->objVote != null)
        {
            if (isset($p['Vote'])) //read the Vote Object
                $this->objVote->readCursor($p['Vote'],true);
            else
                $this->objVote->sID = (string) new MongoId();
        }

        if ((isset($p['RepliesComp']))&&($this->objRepliesComponent != null))
                $this->objRepliesComponent->readCursor($p['RepliesComp'], true);

        if ((isset($p['Images']))&&($this->objImagesComponent != null))
            $this->objImagesComponent->readCursor($p['Images'], true);

        if ((isset($p['ImagesData']))&&($this->objImagesComponent != null))
            $this->objImagesComponent->readCursor($p['ImagesData'], true);
    }

    protected function serializeProperties()
    {
        $arrResult = parent::serializeProperties();

        if ((isset($this->arrInputKeywords))&&(count($this->arrInputKeywords)>0)) $arrResult = array_merge($arrResult, array("InputKeywords"=>$this->arrInputKeywords));

        if (isset($this->sURLName)) $arrResult = array_merge($arrResult, array("URLName"=>$this->sURLName));
        if (isset($this->sFullURLLink)) $arrResult = array_merge($arrResult, array("FullURLLink"=>$this->sFullURLLink));
        if (isset($this->sFullURLDomains)) $arrResult = array_merge($arrResult, array("FullURLDomains"=>$this->sFullURLDomains));
        if (isset($this->sFullURLName)) $arrResult = array_merge($arrResult, array("FullURLName"=>$this->sFullURLName));

        if (isset($this->sCountry)) $arrResult = array_merge($arrResult, array("Country"=>$this->sCountry));
        if (isset($this->sCity)) $arrResult = array_merge($arrResult, array("City"=>$this->sCity));
        if (isset($this->sLanguage)) $arrResult = array_merge($arrResult, array("Language"=>$this->sLanguage));

        if ((isset($this->fImportance)) && ($this->fImportance != 0)) $arrResult = array_merge($arrResult, array("Importance"=>$this->fImportance));

        if ($this->objVisitorsStatistics != null)
        {
            $this->objVisitorsStatistics->sParentID = $this->sID;
            $arrResult = array_merge($arrResult, ["Visitors"=>$this->objVisitorsStatistics->serializeProperties()]);
        }

        if ($this->objVote != null)
            if (count($this->objVote->arrVotes) > 0)
                $arrResult = array_merge($arrResult, array("Vote"=>$this->objVote->serializeProperties()));

        if ($this->objRepliesComponent != null)
            $arrResult = array_merge($arrResult, array("RepliesComp"=>$this->objRepliesComponent ->serializeProperties()));

        if ($this->objImagesComponent != null)
            $arrResult = array_merge($arrResult, array("ImagesData" => $this->objImagesComponent->serializeProperties()));

        return $arrResult;
    }


    public function getBreadCrumbArray()//this will divide the Full URL in arrays
    {
        $arrayURLs = explode("/",$this->sFullURLLink) ;
        $arrayDomains = explode("/",$this->sFullURLDomains);
        $arrayNames = explode("/",$this->sFullURLName);
        $array = array(); $sURL = '';

        //var_dump($arrayURLs);
        for ($index=0; $index<count($arrayURLs); $index++)
        {
            $URLElement = $arrayURLs[$index];
            if (count($arrayDomains) > $index) $URLDomain = $arrayDomains[$index];
            else $URLDomain = '';

            if (count($arrayNames) > $index)  $URLName = $arrayNames[$index];
            else $URLName = '';

            $URLDomain = str_replace('_', '/', $URLDomain);

            $sURL .= $URLElement.'/';
            //if ($index==count($arrayURLs)-1) $sURL='';

            if ($sURL != '')
                $sFinalURL = base_url( rtrim($URLDomain, '/').'/'.$sURL);
            else
                $sFinalURL ='';

            array_push($array,array("url"=>$sFinalURL ,"name"=>$URLName,"domain"=>$URLDomain));
        }
        return $array;
    }

    public function getFullURLArray()//this will divide the Full URL in arrays
    {
        $arrayURLs = explode("/",$this->sFullURLLink) ;
        $array = array(); $sURL = '';

        for ($index=0; $index<count($arrayURLs); $index++)
        {
            $URLElement = $arrayURLs[$index];
            $sURL .= $URLElement.'/';
            if ($index==count($arrayURLs)-1) $sURL='';
            if ($sURL != '') $sFinalURL = base_url('category/'.$sURL); else $sFinalURL ='';

            array_push($array,array("url"=>$sFinalURL ,"name"=>$URLElement));
        }
        return $array;
    }

    public function getInputKeywordsToString()
    {
        $result = '';
        for ($index=0; $index<count($this->arrInputKeywords); $index++)
        {
            $result .= $this->arrInputKeywords[$index];
            if ($index != count($this->arrInputKeywords) - 1)
                $result .= ' , ';
        }
        ;
        return $result;
    }

    public function increaseViews($bDoRefresh=true)
    {
        if ($this->objVisitorsStatistics != null) {

            if ((isset($this->MyUser->enUserRole))&&($this->MyUser->enUserRole == TUserRole::BotUser))
                return;

            $this->objVisitorsStatistics->increaseNumberViews(1, $bDoRefresh);
            if (method_exists($this,'rewriteCache')) $this->rewriteCache(false);
        }
    }

    public function increaseSeen($bDoRefresh=true)
    {
        if ($this->objVisitorsStatistics != null){

            if ($this->MyUser->enUserRole == TUserRole::BotUser)
                return;

            $this->objVisitorsStatistics->increaseNumberSeen(1,$bDoRefresh);
            if (method_exists($this,'rewriteCache')) $this->rewriteCache(false);
        }
    }

    public function isIcon(&$sIcon)
    {
        if ($this->StringsAdvanced->startsWith($sIcon,"fa")) {
            if (!$this->StringsAdvanced->startsWith($sIcon,"fa fa")) $sIcon = "fa ". $sIcon;
            return true;
        } else
            if ($this->StringsAdvanced->startsWith($sIcon,"glyphicon"))
            {
                if (!$this->StringsAdvanced->startsWith($sIcon,"glyphicon glyphicon")) $sIcon = "glyphicon ". $sIcon;
                return true;
            }

        return false;
    }

    public function getTags()
    {
        return $this->arrInputKeywords;
    }

    protected function childrenArrayInitialization($sArrayName)
    {
        parent::childrenArrayInitialization($sArrayName);

        $this->{$sArrayName.'Views'} = 0;
        $this->{$sArrayName.'Seen'} = 0;
    }

    protected function childrenArrayInsert($object, $DynamicArrayName)
    {
        parent::childrenArrayInsert($object, $DynamicArrayName);

        if (property_exists($object,$DynamicArrayName.'Views'))
            $this->{$DynamicArrayName.'Views'} += $object->{$DynamicArrayName.'Views'};

        if (property_exists($object,$DynamicArrayName.'Seen'))
            $this->{$DynamicArrayName.'Seen'} += $object->{$DynamicArrayName.'Seen'};
    }

    public function cloneObject($object)
    {
        parent::cloneObject($object); // TODO: Change the autogenerated stub
        $this->sCountry = $object->sCountry; $this->sCity = $object->sCity;
        $this->sFullURLDomains = $object->sFullURLDomains;
        $this->sFullURLLink = $object->sFullURLLink;
        $this->sFullURLName = $object->sFullURLName;
        $this->fImportance = $object->fImportance;

        $this->dtCreationDate = $object->dtCreationDate; $this->dtLastChangeDate = $object->dtLastChangeDate;

        if (($this->objVisitorsStatistics != null) && ($object->objVisitorsStatistics != null)) {
            $this->objVisitorsStatistics->sAttachedParentId = $object->objVisitorsStatistics->sAttachedParentId;
            $this->objVisitorsStatistics->sID = $object->objVisitorsStatistics->sID;
            $this->objVisitorsStatistics->sAuthorId = $object->objVisitorsStatistics->sAuthorId;
        }

        $this->objVote->cloneObject($object->objVote);
    }

    public function removeParent($bSonAlready=false, $newGrandParent=null)
    {
        if ($this->objVisitorsStatistics != null) $this->objVisitorsStatistics->removeParent($newGrandParent == null ? $this : $newGrandParent);
        if ($this->objVote != null) $this->objVote->removeParent(true,($newGrandParent == null ? $this : $newGrandParent));
        parent::removeParent($bSonAlready, $newGrandParent);
    }

    public function callDestructorCached()
    {
        parent::callDestructorCached();

        if ($this->objVisitorsStatistics != null) {
            MY_Advanced_model::$destructorCopy[$this->sID . 'updateByQueryMethod'] = $this->objVisitorsStatistics->updateByQueryMethod;
            unset($this->objVisitorsStatistics->updateByQueryMethod);
        }
    }

    public function retrieveBackDestructorCached()
    {
        parent::retrieveBackDestructorCached();

        if ($this->objVisitorsStatistics != null) {
            $this->objVisitorsStatistics->updateByQueryMethod = MY_Advanced_model::$destructorCopy[$this->sID . 'updateByQueryMethod'];
        }
    }

}